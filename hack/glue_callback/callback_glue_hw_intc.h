void glue_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd);
void glue_pic_set_irq(bool master, int irq, int level);
void glue_pic_interrupt(int irq, int intno);
void glue_pic_ioport_write(bool master, uint64_t addr, uint64_t val);
void glue_pic_ioport_read(bool master, uint64_t addr, int val);
void glue_cpu_set_apic_base(uint64_t val);
void glue_cpu_get_apic_base(uint64_t val);
void glue_apic_report_irq_delivered(int apic_irq_delivered);
void glue_apic_reset_irq_delivered(int apic_irq_delivered);
void glue_apic_get_irq_delivered(int apic_irq_delivered);
void glue_apic_local_deliver(int vector, uint32_t lvt);
void glue_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode);
void glue_apic_mem_readl(uint64_t addr, uint32_t val);
void glue_apic_mem_writel(uint64_t addr, uint32_t val);
void glue_ioapic_set_remote_irr(int n);
void glue_ioapic_clear_remote_irr(int n, int vector);
void glue_ioapic_eoi_broadcast(int vector);
void glue_ioapic_eoi_delayed_reassert(int vector);
void glue_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val);
void glue_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val);
void glue_ioapic_set_irq(int vector, int level);
void glue_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret);
void glue_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val);
void glue_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending);
void glue_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending);
void glue_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret);
void glue_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val);
void glue_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled);
void glue_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled);
void glue_slavio_intctlm_mem_writel_target(uint32_t cpu);
void glue_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled);
void glue_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level);
void glue_slavio_set_timer_irq_cpu(int cpu, int level);
void glue_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2);
void glue_grlib_irqmp_ack(int intno);
void glue_grlib_irqmp_set_irq(int irq);
void glue_grlib_irqmp_readl_unknown(uint64_t addr);
void glue_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value);
void glue_xics_icp_check_ipi(int server, uint8_t mfrr);
void glue_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr);
void glue_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr);
void glue_xics_icp_irq(int server, int nr, uint8_t priority);
void glue_xics_icp_raise(uint32_t xirr, uint8_t pending_priority);
void glue_xics_ics_set_irq_msi(int srcno, int nr);
void glue_xics_masked_pending(void);
void glue_xics_ics_set_irq_lsi(int srcno, int nr);
void glue_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority);
void glue_xics_ics_reject(int nr, int srcno);
void glue_xics_ics_eoi(int nr);
void glue_flic_create_device(int err);
void glue_flic_reset_failed(int err);
void glue_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc);
void glue_qemu_s390_suppress_airq(uint8_t isc, const char *from, const char *to);
void glue_aspeed_vic_set_irq(int irq, int level);
void glue_aspeed_vic_update_fiq(int flags);
void glue_aspeed_vic_update_irq(int flags);
void glue_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value);
void glue_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data);
void glue_gic_enable_irq(int irq);
void glue_gic_disable_irq(int irq);
void glue_gic_set_irq(int irq, int level, int cpumask, int target);
void glue_gic_update_bestirq(const char *s, int cpu, int irq, int prio, int priority_mask, int running_priority);
void glue_gic_update_set_irq(int cpu, const char *name, int level);
void glue_gic_acknowledge_irq(const char *s, int cpu, int irq);
void glue_gic_cpu_write(const char *s, int cpu, int addr, uint32_t val);
void glue_gic_cpu_read(const char *s, int cpu, int addr, uint32_t val);
void glue_gic_hyp_read(int addr, uint32_t val);
void glue_gic_hyp_write(int addr, uint32_t val);
void glue_gic_dist_read(int addr, unsigned int size, uint32_t val);
void glue_gic_dist_write(int addr, unsigned int size, uint32_t val);
void glue_gic_lr_entry(int cpu, int entry, uint32_t val);
void glue_gic_update_maintenance_irq(int cpu, int val);
void glue_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val);
void glue_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio);
void glue_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel);
void glue_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist);
void glue_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_dir_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val);
void glue_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val);
void glue_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val);
void glue_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val);
void glue_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_misr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_dir_write(uint32_t cpu, uint64_t val);
void glue_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val);
void glue_gicv3_cpuif_virt_update(uint32_t cpuid, int idx);
void glue_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel);
void glue_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure);
void glue_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_dist_set_irq(int irq, int level);
void glue_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure);
void glue_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure);
void glue_gicv3_redist_set_irq(uint32_t cpu, int irq, int level);
void glue_gicv3_redist_send_sgi(uint32_t cpu, int irq);
void glue_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio);
void glue_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio);
void glue_nvic_set_prio(int irq, bool secure, uint8_t prio);
void glue_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level);
void glue_nvic_escalate_prio(int irq, int irqprio, int runprio);
void glue_nvic_escalate_disabled(int irq);
void glue_nvic_set_pending(int irq, bool secure, bool targets_secure, bool derived, int en, int prio);
void glue_nvic_clear_pending(int irq, bool secure, int en, int prio);
void glue_nvic_acknowledge_irq(int irq, int prio);
void glue_nvic_get_pending_irq_info(int irq, bool secure);
void glue_nvic_complete_irq(int irq, bool secure);
void glue_nvic_set_irq_level(int irq, int level);
void glue_nvic_set_nmi_level(int level);
void glue_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size);
void glue_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size);
void glue_heathrow_write(uint64_t addr, unsigned int n, uint64_t value);
void glue_heathrow_read(uint64_t addr, unsigned int n, uint64_t value);
void glue_heathrow_set_irq(int num, int level);
void glue_bcm2835_ic_set_gpu_irq(int irq, int level);
void glue_bcm2835_ic_set_cpu_irq(int irq, int level);
void glue_spapr_xive_claim_irq(uint32_t lisn, bool lsi);
void glue_spapr_xive_free_irq(uint32_t lisn);
void glue_spapr_xive_set_irq(uint32_t lisn, uint32_t val);
void glue_spapr_xive_get_source_info(uint64_t flags, uint64_t lisn);
void glue_spapr_xive_set_source_config(uint64_t flags, uint64_t lisn, uint64_t target, uint64_t priority, uint64_t eisn);
void glue_spapr_xive_get_source_config(uint64_t flags, uint64_t lisn);
void glue_spapr_xive_get_queue_info(uint64_t flags, uint64_t target, uint64_t priority);
void glue_spapr_xive_set_queue_config(uint64_t flags, uint64_t target, uint64_t priority, uint64_t qpage, uint64_t qsize);
void glue_spapr_xive_get_queue_config(uint64_t flags, uint64_t target, uint64_t priority);
void glue_spapr_xive_set_os_reporting_line(uint64_t flags);
void glue_spapr_xive_get_os_reporting_line(uint64_t flags);
void glue_spapr_xive_esb(uint64_t flags, uint64_t lisn, uint64_t offset, uint64_t data);
void glue_spapr_xive_sync(uint64_t flags, uint64_t lisn);
void glue_spapr_xive_reset(uint64_t flags);
void glue_kvm_xive_cpu_connect(uint32_t id);
void glue_kvm_xive_source_reset(uint32_t srcno);
void glue_xive_tctx_accept(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr);
void glue_xive_tctx_notify(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr);
void glue_xive_tctx_set_cppr(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr);
void glue_xive_source_esb_read(uint64_t addr, uint32_t srcno, uint64_t value);
void glue_xive_source_esb_write(uint64_t addr, uint32_t srcno, uint64_t value);
void glue_xive_router_end_notify(uint8_t end_blk, uint32_t end_idx, uint32_t end_data);
void glue_xive_router_end_escalate(uint8_t end_blk, uint32_t end_idx, uint8_t esc_blk, uint32_t esc_idx, uint32_t end_data);
void glue_xive_tctx_tm_write(uint64_t offset, unsigned int size, uint64_t value);
void glue_xive_tctx_tm_read(uint64_t offset, unsigned int size, uint64_t value);
void glue_xive_presenter_notify(uint8_t nvt_blk, uint32_t nvt_idx, uint8_t ring);
void glue_xive_end_source_read(uint8_t end_blk, uint32_t end_idx, uint64_t addr);
void glue_pnv_xive_ic_hw_trigger(uint64_t addr, uint64_t val);
void glue_goldfish_irq_request(void *dev, int idx, int irq, int level);
void glue_goldfish_pic_read(void *dev, int idx, unsigned int addr, unsigned int size, uint64_t value);
void glue_goldfish_pic_write(void *dev, int idx, unsigned int addr, unsigned int size, uint64_t value);
void glue_goldfish_pic_reset(void *dev, int idx);
void glue_goldfish_pic_realize(void *dev, int idx);
void glue_goldfish_pic_instance_init(void *dev);
void glue_sh_intc_sources(int p, int a, int c, int m, unsigned short v, const char *s1, const char *s2, const char *s3);
void glue_sh_intc_pending(int p, unsigned short v);
void glue_sh_intc_register(const char *s, int id, unsigned short v, int c, int m);
void glue_sh_intc_read(unsigned size, uint64_t offset, unsigned long val);
void glue_sh_intc_write(unsigned size, uint64_t offset, unsigned long val);
void glue_sh_intc_set(int id, int enable);
