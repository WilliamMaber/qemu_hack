void glue_allwinner_sun8i_emac_mii_write_reg(uint32_t reg, uint32_t value);
void glue_allwinner_sun8i_emac_mii_read_reg(uint32_t reg, uint32_t value);
void glue_allwinner_sun8i_emac_receive(uint32_t desc, uint32_t paddr, uint32_t bytes);
void glue_allwinner_sun8i_emac_transmit(uint32_t desc, uint32_t paddr, uint32_t bytes);
void glue_allwinner_sun8i_emac_reset(void);
void glue_allwinner_sun8i_emac_set_link(bool active);
void glue_allwinner_sun8i_emac_read(uint64_t offset, uint64_t val);
void glue_allwinner_sun8i_emac_write(uint64_t offset, uint64_t val);
void glue_mdio_phy_read(int regnum, uint16_t value);
void glue_mdio_phy_write(int regnum, uint16_t value);
void glue_mdio_bitbang(bool mdc, bool mdio, int state, uint16_t cnt, unsigned int drive);
void glue_lance_mem_readw(uint64_t addr, uint32_t ret);
void glue_lance_mem_writew(uint64_t addr, uint32_t val);
void glue_mipsnet_send(uint32_t size);
void glue_mipsnet_receive(uint32_t size);
void glue_mipsnet_read(uint64_t addr, uint32_t val);
void glue_mipsnet_write(uint64_t addr, uint64_t val);
void glue_mipsnet_irq(uint32_t isr, uint32_t intctl);
void glue_ne2000_read(uint64_t addr, uint64_t val);
void glue_ne2000_write(uint64_t addr, uint64_t val);
void glue_ne2000_ioport_read(uint64_t addr, uint64_t val);
void glue_ne2000_ioport_write(uint64_t addr, uint64_t val);
void glue_open_eth_mii_write(unsigned idx, uint16_t v);
void glue_open_eth_mii_read(unsigned idx, uint16_t v);
void glue_open_eth_update_irq(uint32_t v);
void glue_open_eth_receive(unsigned len);
void glue_open_eth_receive_mcast(unsigned idx, uint32_t h0, uint32_t h1);
void glue_open_eth_receive_reject(void);
void glue_open_eth_receive_desc(uint32_t addr, uint32_t len_flags);
void glue_open_eth_start_xmit(uint32_t addr, unsigned len, unsigned tx_len);
void glue_open_eth_reg_read(uint32_t addr, uint32_t v);
void glue_open_eth_reg_write(uint32_t addr, uint32_t v);
void glue_open_eth_desc_read(uint32_t addr, uint32_t v);
void glue_open_eth_desc_write(uint32_t addr, uint32_t v);
void glue_pcnet_s_reset(void *s);
void glue_pcnet_user_int(void *s);
void glue_pcnet_isr_change(void *s, uint32_t isr, uint32_t isr_old);
void glue_pcnet_init(void *s, uint64_t init_addr);
void glue_pcnet_rlen_tlen(void *s, uint32_t rlen, uint32_t tlen);
void glue_pcnet_ss32_rdra_tdra(void *s, uint32_t ss32, uint32_t rdra, uint32_t rcvrl, uint32_t tdra, uint32_t xmtrl);
void glue_pcnet_aprom_writeb(void *opaque, uint32_t addr, uint32_t val);
void glue_pcnet_aprom_readb(void *opaque, uint32_t addr, uint32_t val);
void glue_pcnet_ioport_read(void *opaque, uint64_t addr, unsigned size);
void glue_pcnet_ioport_write(void *opaque, uint64_t addr, uint64_t data, unsigned size);
void glue_net_rx_pkt_parsed(bool ip4, bool ip6, bool udp, bool tcp, size_t l3o, size_t l4o, size_t l5o);
void glue_net_rx_pkt_l4_csum_validate_entry(void);
void glue_net_rx_pkt_l4_csum_validate_not_xxp(void);
void glue_net_rx_pkt_l4_csum_validate_udp_with_no_checksum(void);
void glue_net_rx_pkt_l4_csum_validate_ip4_fragment(void);
void glue_net_rx_pkt_l4_csum_validate_csum(bool csum_valid);
void glue_net_rx_pkt_l4_csum_calc_entry(void);
void glue_net_rx_pkt_l4_csum_calc_ip4_udp(void);
void glue_net_rx_pkt_l4_csum_calc_ip4_tcp(void);
void glue_net_rx_pkt_l4_csum_calc_ip6_udp(void);
void glue_net_rx_pkt_l4_csum_calc_ip6_tcp(void);
void glue_net_rx_pkt_l4_csum_calc_ph_csum(uint32_t cntr, uint16_t csl);
void glue_net_rx_pkt_l4_csum_calc_csum(size_t l4hdr_off, uint16_t csl, uint32_t cntr, uint16_t csum);
void glue_net_rx_pkt_l4_csum_fix_entry(void);
void glue_net_rx_pkt_l4_csum_fix_tcp(uint32_t l4_cso);
void glue_net_rx_pkt_l4_csum_fix_udp(uint32_t l4_cso);
void glue_net_rx_pkt_l4_csum_fix_not_xxp(void);
void glue_net_rx_pkt_l4_csum_fix_ip4_fragment(void);
void glue_net_rx_pkt_l4_csum_fix_udp_with_no_checksum(void);
void glue_net_rx_pkt_l4_csum_fix_csum(uint32_t cso, uint16_t csum);
void glue_net_rx_pkt_l3_csum_validate_entry(void);
void glue_net_rx_pkt_l3_csum_validate_not_ip4(void);
void glue_net_rx_pkt_l3_csum_validate_csum(size_t l3hdr_off, uint32_t csl, uint32_t cntr, uint16_t csum, bool csum_valid);
void glue_net_rx_pkt_rss_ip4(void);
void glue_net_rx_pkt_rss_ip4_tcp(void);
void glue_net_rx_pkt_rss_ip4_udp(void);
void glue_net_rx_pkt_rss_ip6_tcp(void);
void glue_net_rx_pkt_rss_ip6_udp(void);
void glue_net_rx_pkt_rss_ip6(void);
void glue_net_rx_pkt_rss_ip6_ex(void);
void glue_net_rx_pkt_rss_ip6_ex_tcp(void);
void glue_net_rx_pkt_rss_ip6_ex_udp(void);
void glue_net_rx_pkt_rss_hash(size_t rss_length, uint32_t rss_hash);
void glue_net_rx_pkt_rss_add_chunk(void* ptr, size_t size, size_t input_offset);
void glue_e1000_receiver_overrun(size_t s, uint32_t rdh, uint32_t rdt);
void glue_e1000x_rx_can_recv_disabled(bool link_up, bool rx_enabled, bool pci_master);
void glue_e1000x_vlan_is_vlan_pkt(bool is_vlan_pkt, uint16_t eth_proto, uint16_t vet);
void glue_e1000x_rx_flt_ucast_match(uint32_t idx, uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_e1000x_rx_flt_ucast_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_e1000x_rx_flt_inexact_mismatch(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5, uint32_t mo, uint32_t mta, uint32_t mta_val);
void glue_e1000x_rx_link_down(uint32_t status_reg);
void glue_e1000x_rx_disabled(uint32_t rctl_reg);
void glue_e1000x_rx_oversized(size_t size);
void glue_e1000x_mac_indicate(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_e1000x_link_negotiation_start(void);
void glue_e1000x_link_negotiation_done(void);
void glue_e1000e_core_write(uint64_t index, uint32_t size, uint64_t val);
void glue_e1000e_core_read(uint64_t index, uint32_t size, uint64_t val);
void glue_e1000e_core_mdic_read(uint8_t page, uint32_t addr, uint32_t data);
void glue_e1000e_core_mdic_read_unhandled(uint8_t page, uint32_t addr);
void glue_e1000e_core_mdic_write(uint8_t page, uint32_t addr, uint32_t data);
void glue_e1000e_core_mdic_write_unhandled(uint8_t page, uint32_t addr);
void glue_e1000e_core_ctrl_write(uint64_t index, uint32_t val);
void glue_e1000e_core_ctrl_sw_reset(void);
void glue_e1000e_core_ctrl_phy_reset(void);
void glue_e1000e_link_autoneg_flowctl(bool enabled);
void glue_e1000e_link_set_params(bool autodetect, uint32_t speed, bool force_spd, bool force_dplx, bool rx_fctl, bool tx_fctl);
void glue_e1000e_link_read_params(bool autodetect, uint32_t speed, bool force_spd, bool force_dplx, bool rx_fctl, bool tx_fctl);
void glue_e1000e_link_set_ext_params(bool asd_check, bool speed_select_bypass);
void glue_e1000e_link_status(bool link_up, bool full_dplx, uint32_t speed, uint32_t asdv);
void glue_e1000e_link_status_changed(bool status);
void glue_e1000e_wrn_regs_write_ro(uint64_t index, uint32_t size, uint64_t val);
void glue_e1000e_wrn_regs_write_unknown(uint64_t index, uint32_t size, uint64_t val);
void glue_e1000e_wrn_regs_read_unknown(uint64_t index, uint32_t size);
void glue_e1000e_wrn_regs_read_trivial(uint32_t index);
void glue_e1000e_wrn_regs_write_trivial(uint32_t index);
void glue_e1000e_wrn_no_ts_support(void);
void glue_e1000e_wrn_no_snap_support(void);
void glue_e1000e_wrn_iscsi_filtering_not_supported(void);
void glue_e1000e_wrn_nfsw_filtering_not_supported(void);
void glue_e1000e_wrn_nfsr_filtering_not_supported(void);
void glue_e1000e_tx_disabled(void);
void glue_e1000e_tx_descr(void *addr, uint32_t lower, uint32_t upper);
void glue_e1000e_ring_free_space(int ridx, uint32_t rdlen, uint32_t rdh, uint32_t rdt);
void glue_e1000e_rx_can_recv_rings_full(void);
void glue_e1000e_rx_can_recv(void);
void glue_e1000e_rx_has_buffers(int ridx, uint32_t free_desc, size_t total_size, uint32_t desc_buf_size);
void glue_e1000e_rx_null_descriptor(void);
void glue_e1000e_rx_flt_vlan_mismatch(uint16_t vid);
void glue_e1000e_rx_flt_vlan_match(uint16_t vid);
void glue_e1000e_rx_desc_ps_read(uint64_t a0, uint64_t a1, uint64_t a2, uint64_t a3);
void glue_e1000e_rx_desc_ps_write(uint16_t a0, uint16_t a1, uint16_t a2, uint16_t a3);
void glue_e1000e_rx_desc_buff_sizes(uint32_t b0, uint32_t b1, uint32_t b2, uint32_t b3);
void glue_e1000e_rx_desc_len(uint8_t rx_desc_len);
void glue_e1000e_rx_desc_buff_write(uint8_t idx, uint64_t addr, uint16_t offset, const void* source, uint32_t len);
void glue_e1000e_rx_descr(int ridx, uint64_t base, uint8_t len);
void glue_e1000e_rx_set_rctl(uint32_t rctl);
void glue_e1000e_rx_receive_iov(int iovcnt);
void glue_e1000e_rx_flt_dropped(void);
void glue_e1000e_rx_written_to_guest(uint32_t causes);
void glue_e1000e_rx_not_written_to_guest(uint32_t causes);
void glue_e1000e_rx_interrupt_set(uint32_t causes);
void glue_e1000e_rx_interrupt_delayed(uint32_t causes);
void glue_e1000e_rx_set_cso(int cso_state);
void glue_e1000e_rx_set_rdt(int queue_idx, uint32_t val);
void glue_e1000e_rx_set_rfctl(uint32_t val);
void glue_e1000e_rx_start_recv(void);
void glue_e1000e_rx_rss_started(void);
void glue_e1000e_rx_rss_disabled(void);
void glue_e1000e_rx_rss_type(uint32_t type);
void glue_e1000e_rx_rss_ip4(bool isfragment, bool istcp, uint32_t mrqc, bool tcpipv4_enabled, bool ipv4_enabled);
void glue_e1000e_rx_rss_ip6_rfctl(uint32_t rfctl);
void glue_e1000e_rx_rss_ip6(bool ex_dis, bool new_ex_dis, bool istcp, bool has_ext_headers, bool ex_dst_valid, bool ex_src_valid, uint32_t mrqc, bool tcpipv6_enabled, bool ipv6ex_enabled, bool ipv6_enabled);
void glue_e1000e_rx_rss_dispatched_to_queue(int queue_idx);
void glue_e1000e_rx_metadata_protocols(bool isip4, bool isip6, bool isudp, bool istcp);
void glue_e1000e_rx_metadata_vlan(uint16_t vlan_tag);
void glue_e1000e_rx_metadata_rss(uint32_t rss, uint32_t mrq);
void glue_e1000e_rx_metadata_ip_id(uint16_t ip_id);
void glue_e1000e_rx_metadata_ack(void);
void glue_e1000e_rx_metadata_pkt_type(uint32_t pkt_type);
void glue_e1000e_rx_metadata_no_virthdr(void);
void glue_e1000e_rx_metadata_virthdr_no_csum_info(void);
void glue_e1000e_rx_metadata_l3_cso_disabled(void);
void glue_e1000e_rx_metadata_l4_cso_disabled(void);
void glue_e1000e_rx_metadata_l3_csum_validation_failed(void);
void glue_e1000e_rx_metadata_l4_csum_validation_failed(void);
void glue_e1000e_rx_metadata_status_flags(uint32_t status_flags);
void glue_e1000e_rx_metadata_ipv6_sum_disabled(void);
void glue_e1000e_rx_metadata_ipv6_filtering_disabled(void);
void glue_e1000e_vlan_vet(uint16_t vet);
void glue_e1000e_irq_msi_notify(uint32_t cause);
void glue_e1000e_irq_throttling_no_pending_interrupts(void);
void glue_e1000e_irq_msi_notify_postponed(void);
void glue_e1000e_irq_legacy_notify_postponed(void);
void glue_e1000e_irq_throttling_no_pending_vec(int idx);
void glue_e1000e_irq_msix_notify_postponed_vec(int idx);
void glue_e1000e_irq_legacy_notify(bool level);
void glue_e1000e_irq_msix_notify_vec(uint32_t vector);
void glue_e1000e_irq_postponed_by_xitr(uint32_t reg);
void glue_e1000e_irq_clear_ims(uint32_t bits, uint32_t old_ims, uint32_t new_ims);
void glue_e1000e_irq_set_ims(uint32_t bits, uint32_t old_ims, uint32_t new_ims);
void glue_e1000e_irq_fix_icr_asserted(uint32_t new_val);
void glue_e1000e_irq_add_msi_other(uint32_t new_val);
void glue_e1000e_irq_pending_interrupts(uint32_t pending, uint32_t icr, uint32_t ims);
void glue_e1000e_irq_set_cause_entry(uint32_t val, uint32_t icr);
void glue_e1000e_irq_set_cause_exit(uint32_t val, uint32_t icr);
void glue_e1000e_irq_icr_write(uint32_t bits, uint32_t old_icr, uint32_t new_icr);
void glue_e1000e_irq_write_ics(uint32_t val);
void glue_e1000e_irq_icr_process_iame(void);
void glue_e1000e_irq_read_ics(uint32_t ics);
void glue_e1000e_irq_read_ims(uint32_t ims);
void glue_e1000e_irq_icr_read_entry(uint32_t icr);
void glue_e1000e_irq_icr_read_exit(uint32_t icr);
void glue_e1000e_irq_icr_clear_zero_ims(void);
void glue_e1000e_irq_icr_clear_iame(void);
void glue_e1000e_irq_iam_clear_eiame(uint32_t iam, uint32_t cause);
void glue_e1000e_irq_icr_clear_eiac(uint32_t icr, uint32_t eiac);
void glue_e1000e_irq_ims_clear_set_imc(uint32_t val);
void glue_e1000e_irq_fire_delayed_interrupts(void);
void glue_e1000e_irq_rearm_timer(uint32_t reg, int64_t delay_ns);
void glue_e1000e_irq_throttling_timer(uint32_t reg);
void glue_e1000e_irq_rdtr_fpd_running(void);
void glue_e1000e_irq_rdtr_fpd_not_running(void);
void glue_e1000e_irq_tidv_fpd_running(void);
void glue_e1000e_irq_tidv_fpd_not_running(void);
void glue_e1000e_irq_eitr_set(uint32_t eitr_num, uint32_t val);
void glue_e1000e_irq_itr_set(uint32_t val);
void glue_e1000e_irq_fire_all_timers(uint32_t val);
void glue_e1000e_irq_adding_delayed_causes(uint32_t val, uint32_t icr);
void glue_e1000e_irq_msix_pending_clearing(uint32_t cause, uint32_t int_cfg, uint32_t vec);
void glue_e1000e_wrn_msix_vec_wrong(uint32_t cause, uint32_t cfg);
void glue_e1000e_wrn_msix_invalid(uint32_t cause, uint32_t cfg);
void glue_e1000e_mac_set_sw(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_e1000e_vm_state_running(void);
void glue_e1000e_vm_state_stopped(void);
void glue_e1000e_cb_pci_realize(void);
void glue_e1000e_cb_pci_uninit(void);
void glue_e1000e_cb_qdev_reset(void);
void glue_e1000e_cb_pre_save(void);
void glue_e1000e_cb_post_load(void);
void glue_e1000e_io_write_addr(uint64_t addr);
void glue_e1000e_io_write_data(uint64_t addr, uint64_t val);
void glue_e1000e_io_read_addr(uint64_t addr);
void glue_e1000e_io_read_data(uint64_t addr, uint64_t val);
void glue_e1000e_wrn_io_write_unknown(uint64_t addr);
void glue_e1000e_wrn_io_read_unknown(uint64_t addr);
void glue_e1000e_wrn_io_addr_undefined(uint64_t addr);
void glue_e1000e_wrn_io_addr_flash(uint64_t addr);
void glue_e1000e_wrn_io_addr_unknown(uint64_t addr);
void glue_e1000e_msi_init_fail(int32_t res);
void glue_e1000e_msix_init_fail(int32_t res);
void glue_e1000e_msix_use_vector_fail(uint32_t vec, int32_t res);
void glue_e1000e_mac_set_permanent(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_e1000e_cfg_support_virtio(bool support);
void glue_spapr_vlan_get_rx_bd_from_pool_found(int pool, int32_t count, uint32_t rx_bufs);
void glue_spapr_vlan_get_rx_bd_from_page(int buf_ptr, uint64_t bd);
void glue_spapr_vlan_get_rx_bd_from_page_found(uint32_t use_buf_ptr, uint32_t rx_bufs);
void glue_spapr_vlan_receive(const char *id, uint32_t rx_bufs);
void glue_spapr_vlan_receive_dma_completed(void);
void glue_spapr_vlan_receive_wrote(uint64_t ptr, uint64_t hi, uint64_t lo);
void glue_spapr_vlan_add_rxbuf_to_pool_create(int pool, uint64_t len);
void glue_spapr_vlan_add_rxbuf_to_pool(int pool, uint64_t len, int32_t count);
void glue_spapr_vlan_add_rxbuf_to_page(uint32_t ptr, uint32_t rx_bufs, uint64_t bd);
void glue_spapr_vlan_h_add_logical_lan_buffer(uint64_t reg, uint64_t buf);
void glue_spapr_vlan_h_send_logical_lan(uint64_t reg, uint64_t continue_token);
void glue_spapr_vlan_h_send_logical_lan_rxbufs(uint32_t rx_bufs);
void glue_spapr_vlan_h_send_logical_lan_buf_desc(uint64_t buf);
void glue_spapr_vlan_h_send_logical_lan_total(int nbufs, unsigned total_len);
void glue_sungem_tx_checksum(uint16_t start, uint16_t off);
void glue_sungem_tx_checksum_oob(void);
void glue_sungem_tx_unfinished(void);
void glue_sungem_tx_overflow(void);
void glue_sungem_tx_finished(uint32_t size);
void glue_sungem_tx_kick(void);
void glue_sungem_tx_disabled(void);
void glue_sungem_tx_process(uint32_t comp, uint32_t kick, uint32_t size);
void glue_sungem_tx_desc(uint32_t comp, uint64_t control, uint64_t buffer);
void glue_sungem_tx_reset(void);
void glue_sungem_rx_mac_disabled(void);
void glue_sungem_rx_txdma_disabled(void);
void glue_sungem_rx_check(bool full, uint32_t kick, uint32_t done);
void glue_sungem_rx_mac_check(uint32_t mac0, uint32_t mac1, uint32_t mac2);
void glue_sungem_rx_mac_multicast(void);
void glue_sungem_rx_mac_compare(uint32_t mac0, uint32_t mac1, uint32_t mac2);
void glue_sungem_rx_packet(size_t size);
void glue_sungem_rx_disabled(void);
void glue_sungem_rx_bad_frame_size(size_t size);
void glue_sungem_rx_unmatched(void);
void glue_sungem_rx_process(uint32_t done, uint32_t kick, uint32_t size);
void glue_sungem_rx_ringfull(void);
void glue_sungem_rx_desc(uint64_t control, uint64_t buffer);
void glue_sungem_rx_reset(void);
void glue_sungem_rx_kick(uint64_t val);
void glue_sungem_reset(bool pci_reset);
void glue_sungem_mii_write(uint8_t phy_addr, uint8_t reg_addr, uint16_t val);
void glue_sungem_mii_read(uint8_t phy_addr, uint8_t reg_addr, uint16_t val);
void glue_sungem_mii_invalid_sof(uint32_t val);
void glue_sungem_mii_invalid_op(uint8_t op);
void glue_sungem_mmio_greg_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_greg_read(uint64_t addr, uint64_t val);
void glue_sungem_mmio_txdma_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_txdma_read(uint64_t addr, uint64_t val);
void glue_sungem_mmio_rxdma_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_rxdma_read(uint64_t addr, uint64_t val);
void glue_sungem_mmio_mac_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_mac_read(uint64_t addr, uint64_t val);
void glue_sungem_mmio_mif_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_mif_read(uint64_t addr, uint64_t val);
void glue_sungem_mmio_pcs_write(uint64_t addr, uint64_t val);
void glue_sungem_mmio_pcs_read(uint64_t addr, uint64_t val);
void glue_sunhme_seb_write(uint64_t addr, uint64_t value);
void glue_sunhme_seb_read(uint64_t addr, uint64_t value);
void glue_sunhme_etx_write(uint64_t addr, uint64_t value);
void glue_sunhme_etx_read(uint64_t addr, uint64_t value);
void glue_sunhme_erx_write(uint64_t addr, uint64_t value);
void glue_sunhme_erx_read(uint64_t addr, uint64_t value);
void glue_sunhme_mac_write(uint64_t addr, uint64_t value);
void glue_sunhme_mac_read(uint64_t addr, uint64_t value);
void glue_sunhme_mii_write(uint64_t addr, uint64_t value);
void glue_sunhme_mii_read(uint8_t addr, uint16_t value);
void glue_sunhme_mif_write(uint8_t addr, uint16_t value);
void glue_sunhme_mif_read(uint64_t addr, uint64_t value);
void glue_sunhme_tx_desc(uint64_t buffer, uint32_t status, int cr, int nr);
void glue_sunhme_tx_xsum_add(int offset, int len);
void glue_sunhme_tx_xsum_stuff(uint16_t xsum, int offset);
void glue_sunhme_tx_done(int len);
void glue_sunhme_rx_incoming(size_t len);
void glue_sunhme_rx_filter_destmac(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4, uint8_t b5);
void glue_sunhme_rx_filter_local_match(void);
void glue_sunhme_rx_filter_bcast_match(void);
void glue_sunhme_rx_filter_hash_nomatch(void);
void glue_sunhme_rx_filter_hash_match(void);
void glue_sunhme_rx_filter_promisc_match(void);
void glue_sunhme_rx_filter_reject(void);
void glue_sunhme_rx_filter_accept(void);
void glue_sunhme_rx_desc(uint32_t addr, int offset, uint32_t status, int len, int cr, int nr);
void glue_sunhme_rx_xsum_calc(uint16_t xsum);
void glue_sunhme_rx_norxd(void);
void glue_sunhme_update_irq(uint32_t mifmask, uint32_t mif, uint32_t sebmask, uint32_t seb, int level);
void glue_virtio_net_announce_notify(void);
void glue_virtio_net_announce_timer(int round);
void glue_virtio_net_handle_announce(int round);
void glue_virtio_net_post_load_device(void);
void glue_virtio_net_rss_disable(void);
void glue_virtio_net_rss_error(const char *msg, uint32_t value);
void glue_virtio_net_rss_enable(uint32_t p1, uint16_t p2, uint8_t p3);
void glue_tulip_reg_write(uint64_t addr, const char *name, int size, uint64_t val);
void glue_tulip_reg_read(uint64_t addr, const char *name, int size, uint64_t val);
void glue_tulip_receive(const uint8_t *buf, size_t len);
void glue_tulip_descriptor(const char *prefix, uint32_t addr, uint32_t status, uint32_t control, uint32_t len1, uint32_t len2, uint32_t buf1, uint32_t buf2);
void glue_tulip_rx_state(const char *state);
void glue_tulip_tx_state(const char *state);
void glue_tulip_irq(uint32_t mask, uint32_t en, const char *state);
void glue_tulip_mii_write(int phy, int reg, uint16_t data);
void glue_tulip_mii_read(int phy, int reg, uint16_t data);
void glue_tulip_reset(void);
void glue_tulip_setup_frame(void);
void glue_tulip_setup_filter(int n, uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f);
void glue_lasi_82596_mem_readw(uint64_t addr, uint32_t ret);
void glue_lasi_82596_mem_writew(uint64_t addr, uint32_t val);
void glue_i82596_s_reset(void *s);
void glue_i82596_transmit(uint32_t size, uint32_t addr);
void glue_i82596_receive_analysis(const char *s);
void glue_i82596_receive_packet(size_t sz);
void glue_i82596_new_mac(const char *id_with_mac);
void glue_i82596_set_multicast(uint16_t count);
void glue_i82596_channel_attention(void *s);
void glue_imx_phy_read(uint32_t val, int phy, int reg);
void glue_imx_phy_read_num(int phy, int configured);
void glue_imx_phy_write(uint32_t val, int phy, int reg);
void glue_imx_phy_write_num(int phy, int configured);
void glue_imx_phy_update_link(const char *s);
void glue_imx_phy_reset(void);
void glue_imx_fec_read_bd(uint64_t addr, int flags, int len, int data);
void glue_imx_enet_read_bd(uint64_t addr, int flags, int len, int data, int options, int status);
void glue_imx_eth_tx_bd_busy(void);
void glue_imx_eth_rx_bd_full(void);
void glue_imx_eth_read(int reg, const char *reg_name, uint32_t value);
void glue_imx_eth_write(int reg, const char *reg_name, uint64_t value);
void glue_imx_fec_receive(size_t size);
void glue_imx_fec_receive_len(uint64_t addr, int len);
void glue_imx_fec_receive_last(int last);
void glue_imx_enet_receive(size_t size);
void glue_imx_enet_receive_len(uint64_t addr, int len);
void glue_imx_enet_receive_last(int last);
void glue_npcm7xx_emc_reset(int emc_num);
void glue_npcm7xx_emc_update_tx_irq(int level);
void glue_npcm7xx_emc_update_rx_irq(int level);
void glue_npcm7xx_emc_set_mista(uint32_t flags);
void glue_npcm7xx_emc_cpu_owned_desc(uint32_t addr);
void glue_npcm7xx_emc_sent_packet(uint32_t len);
void glue_npcm7xx_emc_tx_done(uint32_t ctxdsa);
void glue_npcm7xx_emc_can_receive(int can_receive);
void glue_npcm7xx_emc_packet_filtered_out(const char* fail_reason);
void glue_npcm7xx_emc_packet_dropped(uint32_t len);
void glue_npcm7xx_emc_receiving_packet(uint32_t len);
void glue_npcm7xx_emc_received_packet(uint32_t len);
void glue_npcm7xx_emc_rx_done(uint32_t crxdsa);
void glue_npcm7xx_emc_reg_read(int emc_num, uint32_t result, const char *name, int regno);
void glue_npcm7xx_emc_reg_write(int emc_num, const char *name, int regno, uint32_t value);
void glue_dp8393x_raise_irq(int isr);
void glue_dp8393x_lower_irq(void);
void glue_dp8393x_load_cam(int idx, int cam0, int cam1, int cam2, int cam3, int cam4, int cam5);
void glue_dp8393x_load_cam_done(int cen);
void glue_dp8393x_read_rra_regs(int crba0, int crba1, int rbwc0, int rbwc1);
void glue_dp8393x_transmit_packet(int ttda);
void glue_dp8393x_transmit_txlen_error(int len);
void glue_dp8393x_read(int reg, const char *name, int val, int size);
void glue_dp8393x_write(int reg, const char *name, int val, int size);
void glue_dp8393x_write_invalid(int reg);
void glue_dp8393x_write_invalid_dcr(const char *name);
void glue_dp8393x_receive_oversize(int size);
void glue_dp8393x_receive_not_netcard(void);
void glue_dp8393x_receive_packet(int crba);
void glue_dp8393x_receive_write_status(int crba);
