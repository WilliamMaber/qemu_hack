void glue_bdrv_open_common(void *bs, const char *filename, int flags, const char *format_name);
void glue_bdrv_lock_medium(void *bs, bool locked);
void glue_blk_co_preadv(void *blk, void *bs, int64_t offset, int64_t bytes, int flags);
void glue_blk_co_pwritev(void *blk, void *bs, int64_t offset, int64_t bytes, int flags);
void glue_blk_root_attach(void *child, void *blk, void *bs);
void glue_blk_root_detach(void *child, void *blk, void *bs);
void glue_bdrv_co_preadv_part(void *bs, int64_t offset, int64_t bytes, unsigned int flags);
void glue_bdrv_co_pwritev_part(void *bs, int64_t offset, int64_t bytes, unsigned int flags);
void glue_bdrv_co_pwrite_zeroes(void *bs, int64_t offset, int64_t bytes, int flags);
void glue_bdrv_co_do_copy_on_readv(void *bs, int64_t offset, int64_t bytes, int64_t cluster_offset, int64_t cluster_bytes);
void glue_bdrv_co_copy_range_from(void *src, int64_t src_offset, void *dst, int64_t dst_offset, int64_t bytes, int read_flags, int write_flags);
void glue_bdrv_co_copy_range_to(void *src, int64_t src_offset, void *dst, int64_t dst_offset, int64_t bytes, int read_flags, int write_flags);
void glue_stream_start(void *bs, void *base, void *s);
void glue_commit_start(void *bs, void *base, void *top, void *s);
void glue_mirror_start(void *bs, void *s, void *opaque);
void glue_mirror_restart_iter(void *s, int64_t cnt);
void glue_mirror_before_flush(void *s);
void glue_mirror_before_drain(void *s, int64_t cnt);
void glue_mirror_before_sleep(void *s, int64_t cnt, int synced, uint64_t delay_ns);
void glue_mirror_one_iteration(void *s, int64_t offset, uint64_t bytes);
void glue_mirror_iteration_done(void *s, int64_t offset, uint64_t bytes, int ret);
void glue_mirror_yield(void *s, int64_t cnt, int buf_free_count, int in_flight);
void glue_mirror_yield_in_flight(void *s, int64_t offset, int in_flight);
void glue_backup_do_cow_enter(void *job, int64_t start, int64_t offset, uint64_t bytes);
void glue_backup_do_cow_return(void *job, int64_t offset, uint64_t bytes, int ret);
void glue_block_copy_skip_range(void *bcs, int64_t start, uint64_t bytes);
void glue_block_copy_process(void *bcs, int64_t start);
void glue_block_copy_copy_range_fail(void *bcs, int64_t start, int ret);
void glue_block_copy_read_fail(void *bcs, int64_t start, int ret);
void glue_block_copy_write_fail(void *bcs, int64_t start, int ret);
void glue_block_copy_write_zeroes_fail(void *bcs, int64_t start, int ret);
void glue_qmp_block_job_cancel(void *job);
void glue_qmp_block_job_pause(void *job);
void glue_qmp_block_job_resume(void *job);
void glue_qmp_block_job_complete(void *job);
void glue_qmp_block_job_finalize(void *job);
void glue_qmp_block_job_dismiss(void *job);
void glue_qmp_block_stream(void *bs);
void glue_file_paio_submit(void *acb, void *opaque, int64_t offset, int count, int type);
void glue_luring_init_state(void *s, size_t size);
void glue_luring_cleanup_state(void *s);
void glue_luring_io_plug(void *s);
void glue_luring_io_unplug(void *s, int blocked, int plugged, int queued, int inflight);
void glue_luring_do_submit(void *s, int blocked, int plugged, int queued, int inflight);
void glue_luring_do_submit_done(void *s, int ret);
void glue_luring_co_submit(void *bs, void *s, void *luringcb, int fd, uint64_t offset, size_t nbytes, int type);
void glue_luring_process_completion(void *s, void *aiocb, int ret);
void glue_luring_io_uring_submit(void *s, int ret);
void glue_luring_resubmit_short_read(void *s, void *luringcb, int nread);
void glue_qcow2_add_task(void *co, void *bs, void *pool, const char *action, int cluster_type, uint64_t host_offset, uint64_t offset, uint64_t bytes, void *qiov, size_t qiov_offset);
void glue_qcow2_writev_start_req(void *co, int64_t offset, int64_t bytes);
void glue_qcow2_writev_done_req(void *co, int ret);
void glue_qcow2_writev_start_part(void *co);
void glue_qcow2_writev_done_part(void *co, int cur_bytes);
void glue_qcow2_writev_data(void *co, uint64_t offset);
void glue_qcow2_pwrite_zeroes_start_req(void *co, int64_t offset, int64_t bytes);
void glue_qcow2_pwrite_zeroes(void *co, int64_t offset, int64_t bytes);
void glue_qcow2_skip_cow(void *co, uint64_t offset, int nb_clusters);
void glue_qcow2_alloc_clusters_offset(void *co, uint64_t offset, int bytes);
void glue_qcow2_handle_copied(void *co, uint64_t guest_offset, uint64_t host_offset, uint64_t bytes);
void glue_qcow2_handle_alloc(void *co, uint64_t guest_offset, uint64_t host_offset, uint64_t bytes);
void glue_qcow2_do_alloc_clusters_offset(void *co, uint64_t guest_offset, uint64_t host_offset, int nb_clusters);
void glue_qcow2_cluster_alloc_phys(void *co);
void glue_qcow2_cluster_link_l2(void *co, int nb_clusters);
void glue_qcow2_l2_allocate(void *bs, int l1_index);
void glue_qcow2_l2_allocate_get_empty(void *bs, int l1_index);
void glue_qcow2_l2_allocate_write_l2(void *bs, int l1_index);
void glue_qcow2_l2_allocate_write_l1(void *bs, int l1_index);
void glue_qcow2_l2_allocate_done(void *bs, int l1_index, int ret);
void glue_qcow2_cache_get(void *co, int c, uint64_t offset, bool read_from_disk);
void glue_qcow2_cache_get_replace_entry(void *co, int c, int i);
void glue_qcow2_cache_get_read(void *co, int c, int i);
void glue_qcow2_cache_get_done(void *co, int c, int i);
void glue_qcow2_cache_flush(void *co, int c);
void glue_qcow2_cache_entry_flush(void *co, int c, int i);
void glue_qcow2_process_discards_failed_region(uint64_t offset, uint64_t bytes, int ret);
void glue_qed_alloc_l2_cache_entry(void *l2_cache, void *entry);
void glue_qed_unref_l2_cache_entry(void *entry, int ref);
void glue_qed_find_l2_cache_entry(void *l2_cache, void *entry, uint64_t offset, int ref);
void glue_qed_read_table(void *s, uint64_t offset, void *table);
void glue_qed_read_table_cb(void *s, void *table, int ret);
void glue_qed_write_table(void *s, uint64_t offset, void *table, unsigned int index, unsigned int n);
void glue_qed_write_table_cb(void *s, void *table, int flush, int ret);
void glue_qed_need_check_timer_cb(void *s);
void glue_qed_start_need_check_timer(void *s);
void glue_qed_cancel_need_check_timer(void *s);
void glue_qed_aio_complete(void *s, void *acb, int ret);
void glue_qed_aio_setup(void *s, void *acb, int64_t sector_num, int nb_sectors, void *opaque, int flags);
void glue_qed_aio_next_io(void *s, void *acb, int ret, uint64_t cur_pos);
void glue_qed_aio_read_data(void *s, void *acb, int ret, uint64_t offset, size_t len);
void glue_qed_aio_write_data(void *s, void *acb, int ret, uint64_t offset, size_t len);
void glue_qed_aio_write_prefill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset);
void glue_qed_aio_write_postfill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset);
void glue_qed_aio_write_main(void *s, void *acb, int ret, uint64_t offset, size_t len);
void glue_nvme_controller_capability_raw(uint64_t value);
void glue_nvme_controller_capability(const char *desc, uint64_t value);
void glue_nvme_controller_spec_version(uint32_t mjr, uint32_t mnr, uint32_t ter);
void glue_nvme_kick(void *s, unsigned q_index);
void glue_nvme_dma_flush_queue_wait(void *s);
void glue_nvme_error(int cmd_specific, int sq_head, int sqid, int cid, int status);
void glue_nvme_process_completion(void *s, unsigned q_index, int inflight);
void glue_nvme_process_completion_queue_plugged(void *s, unsigned q_index);
void glue_nvme_complete_command(void *s, unsigned q_index, int cid);
void glue_nvme_submit_command(void *s, unsigned q_index, int cid);
void glue_nvme_submit_command_raw(int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7);
void glue_nvme_handle_event(void *s);
void glue_nvme_poll_queue(void *s, unsigned q_index);
void glue_nvme_prw_aligned(void *s, int is_write, uint64_t offset, uint64_t bytes, int flags, int niov);
void glue_nvme_write_zeroes(void *s, uint64_t offset, uint64_t bytes, int flags);
void glue_nvme_qiov_unaligned(const void *qiov, int n, void *base, size_t size, int align);
void glue_nvme_prw_buffered(void *s, uint64_t offset, uint64_t bytes, int niov, int is_write);
void glue_nvme_rw_done(void *s, int is_write, uint64_t offset, uint64_t bytes, int ret);
void glue_nvme_dsm(void *s, int64_t offset, int64_t bytes);
void glue_nvme_dsm_done(void *s, int64_t offset, int64_t bytes, int ret);
void glue_nvme_dma_map_flush(void *s);
void glue_nvme_free_req_queue_wait(void *s, unsigned q_index);
void glue_nvme_create_queue_pair(unsigned q_index, void *q, size_t size, void *aio_context, int fd);
void glue_nvme_free_queue_pair(unsigned q_index, void *q, void *cq, void *sq);
void glue_nvme_cmd_map_qiov(void *s, void *cmd, void *req, void *qiov, int entries);
void glue_nvme_cmd_map_qiov_pages(void *s, int i, uint64_t page);
void glue_nvme_cmd_map_qiov_iov(void *s, int i, void *page, int pages);
void glue_iscsi_xcopy(void *src_lun, uint64_t src_off, void *dst_lun, uint64_t dst_off, uint64_t bytes, int ret);
void glue_nbd_parse_blockstatus_compliance(const char *err);
void glue_nbd_structured_read_compliance(const char *type);
void glue_nbd_read_reply_entry_fail(int ret, const char *err);
void glue_nbd_co_request_fail(uint64_t from, uint32_t len, uint64_t handle, uint16_t flags, uint16_t type, const char *name, int ret, const char *err);
void glue_nbd_client_handshake(const char *export_name);
void glue_nbd_client_handshake_success(const char *export_name);
void glue_ssh_restart_coroutine(void *co);
void glue_ssh_flush(void);
void glue_ssh_check_host_key_knownhosts(void);
void glue_ssh_connect_to_ssh(char *path, int flags, int mode);
void glue_ssh_co_yield(int sock, void *rd_handler, void *wr_handler);
void glue_ssh_co_yield_back(int sock);
void glue_ssh_getlength(int64_t length);
void glue_ssh_co_create_opts(uint64_t size);
void glue_ssh_read(int64_t offset, size_t size);
void glue_ssh_read_buf(void *buf, size_t size, size_t actual_size);
void glue_ssh_read_return(ssize_t ret, int sftp_err);
void glue_ssh_write(int64_t offset, size_t size);
void glue_ssh_write_buf(void *buf, size_t size, size_t actual_size);
void glue_ssh_write_return(ssize_t ret, int sftp_err);
void glue_ssh_seek(int64_t offset);
void glue_ssh_auth_methods(int methods);
void glue_ssh_server_status(int status);
void glue_curl_timer_cb(long timeout_ms);
void glue_curl_sock_cb(int action, int fd);
void glue_curl_read_cb(size_t realsize);
void glue_curl_open(const char *file);
void glue_curl_open_size(uint64_t size);
void glue_curl_setup_preadv(uint64_t bytes, uint64_t start, const char *range);
void glue_curl_close(void);
void glue_file_copy_file_range(void *bs, int src, int64_t src_off, int dst, int64_t dst_off, int64_t bytes, int flags, int64_t ret);
void glue_file_FindEjectableOpticalMedia(const char *media);
void glue_file_setup_cdrom(const char *partition);
void glue_file_hdev_is_sg(int type, int version);
void glue_file_flush_fdatasync_failed(int err);
void glue_sftp_error(const char *op, const char *ssh_err, int ssh_err_code, int sftp_err_code);
